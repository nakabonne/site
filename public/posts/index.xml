<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ryo Nakao</title>
    <link>https://nakabonne.dev/posts/</link>
    <description>Recent content in Posts on Ryo Nakao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://nakabonne.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Walk the Go AST in depth-first</title>
      <link>https://nakabonne.dev/posts/walk-the-go-ast-in-depth-first/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/walk-the-go-ast-in-depth-first/</guid>
      <description>ドキュメントを見ればASTの全てのNodeの説明はある。しかしイメージが付きづらいのが現実。なので、タイトルの通りサンプルコードを実際に深さ優先探索でinspectしていきながら、現れたNodeの解説をしていくことで、私達が普段書いているGoのコードが内部でどのように表現されているかを理解する。
この記事ではソースコードをパースする方法には触れず、ASTが構築された後について説明します。コードがASTに変換される方法について気になる人は、 Digging deeper into the analysis of Go-code にnavigate toしてください。</description>
    </item>
    
    <item>
      <title>Digging deeper into the analysis of Go-code</title>
      <link>https://nakabonne.dev/posts/digging-deeper-into-the-analysis-of-go-code/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/digging-deeper-into-the-analysis-of-go-code/</guid>
      <description>The analysis of source code at the syntactic level can help you with your coding in a variety of ways.</description>
    </item>
    
    <item>
      <title>Things That Could Drive Me Into a Nervous Breakdown</title>
      <link>https://nakabonne.dev/posts/things-that-could-drive-me-into-a-nervous-breakdown/</link>
      <pubDate>Tue, 04 Jun 2019 05:54:14 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/things-that-could-drive-me-into-a-nervous-breakdown/</guid>
      <description>Photo by Ric Rodrigues from Pexels
Nowadays, I have room in my heart for thinking about what could push me past my breaking point.</description>
    </item>
    
    <item>
      <title>Incredible reasons I make a recommendation to apply to GSoC despite never got accepted</title>
      <link>https://nakabonne.dev/posts/incredible-reasons-i-make-a-recommendation-to-apply-to-gsoc-despite-never-got-accepted/</link>
      <pubDate>Sat, 11 May 2019 02:19:59 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/incredible-reasons-i-make-a-recommendation-to-apply-to-gsoc-despite-never-got-accepted/</guid>
      <description>Unfortunately, as mentioned earlier I was not able to get into Google Summer of Code 2019.</description>
    </item>
    
    <item>
      <title>Depth of module</title>
      <link>https://nakabonne.dev/posts/depth-of-module/</link>
      <pubDate>Thu, 17 Jan 2019 11:33:43 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/depth-of-module/</guid>
      <description>Click here for Japanese version
This article summarizes the concept of deep module described in the book “A Philosophy of Software Design” written by Professor John Ousterhout at Stanford University, and is written with permission of him.</description>
    </item>
    
    <item>
      <title>Realization of distributed tracing by Envoy</title>
      <link>https://nakabonne.dev/posts/realization-of-distributed-tracing-by-envoy/</link>
      <pubDate>Tue, 18 Dec 2018 10:08:02 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/realization-of-distributed-tracing-by-envoy/</guid>
      <description>Necessity of distributed tracing Since distributed architecture such as Microservices are handled across multiple services, it’s difficult to keep track of communication between services.</description>
    </item>
    
    <item>
      <title>A choice to start small Service Mesh</title>
      <link>https://nakabonne.dev/posts/a-choice-to-start-small-service-mesh/</link>
      <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/a-choice-to-start-small-service-mesh/</guid>
      <description>Now, the architecture called Service Mesh is attracting attention in the Microservice industry.</description>
    </item>
    
    <item>
      <title>Go × Clean Architecture implementation pattern</title>
      <link>https://nakabonne.dev/posts/go-clean-architecture/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/go-clean-architecture/</guid>
      <description>Click here for Japanese version
What is Clean Architecture? It could be thought an architecture pattern that dissociates interest by realizing:</description>
    </item>
    
    <item>
      <title>Why was gRPC born?</title>
      <link>https://nakabonne.dev/posts/why-was-grpc-born/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/why-was-grpc-born/</guid>
      <description>The term gRPC became very famous, and articles such as “Introducing gRPC in house” and “How to build gRPC server” can now overflow.</description>
    </item>
    
  </channel>
</rss>