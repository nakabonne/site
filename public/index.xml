<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ryo Nakao</title>
    <link>https://nakabonne.dev/</link>
    <description>Recent content on Ryo Nakao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://nakabonne.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Take a walk the Go AST</title>
      <link>https://nakabonne.dev/posts/take-a-walk-the-go-ast/</link>
      <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/take-a-walk-the-go-ast/</guid>
      <description>What do you refer to when you&amp;rsquo;re curious about the Go AST? A document? Source code? While reading the documentation helps you understand it in the abstract, you can&amp;rsquo;t see how APIs relate to each other, etc. Not to mention, read the entire source code and you&amp;rsquo;ll see it completely, but you should get tired from trying to read the whole stuff.</description>
    </item>
    
    <item>
      <title>Digging deeper into the analysis of Go-code</title>
      <link>https://nakabonne.dev/posts/digging-deeper-into-the-analysis-of-go-code/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/digging-deeper-into-the-analysis-of-go-code/</guid>
      <description>The analysis of source code at the syntactic level can help you with your coding in a variety of ways. For that, the text is almost always converted to AST first to make it easier to handle in most languages.</description>
    </item>
    
    <item>
      <title>Things That Could Drive Me Into a Nervous Breakdown</title>
      <link>https://nakabonne.dev/posts/things-that-could-drive-me-into-a-nervous-breakdown/</link>
      <pubDate>Tue, 04 Jun 2019 05:54:14 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/things-that-could-drive-me-into-a-nervous-breakdown/</guid>
      <description>Photo by Ric Rodrigues from Pexels
Nowadays, I have room in my heart for thinking about what could push me past my breaking point. I can see what I’m seeking and what is what’s necessary to live a fulfilling and healthy life, at least than before — I will walk you through what got started to make my heart empty and how I realized that.</description>
    </item>
    
    <item>
      <title>Incredible reasons I make a recommendation to apply to GSoC despite never got accepted</title>
      <link>https://nakabonne.dev/posts/incredible-reasons-i-make-a-recommendation-to-apply-to-gsoc-despite-never-got-accepted/</link>
      <pubDate>Sat, 11 May 2019 02:19:59 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/incredible-reasons-i-make-a-recommendation-to-apply-to-gsoc-despite-never-got-accepted/</guid>
      <description>Unfortunately, as mentioned earlier I was not able to get into Google Summer of Code 2019.
  Despite things never worked out as my expect, I do not despaired at all. Why?
One of the potential reasons is that I was able to take the first big step toward wonderful OSS committer.</description>
    </item>
    
    <item>
      <title>Depth of module</title>
      <link>https://nakabonne.dev/posts/depth-of-module/</link>
      <pubDate>Thu, 17 Jan 2019 11:33:43 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/depth-of-module/</guid>
      <description>Click here for Japanese version
This article summarizes the concept of deep module described in the book “A Philosophy of Software Design” written by Professor John Ousterhout at Stanford University, and is written with permission of him. However, this is mainly describing my opinion rather than giving detailed contents of this book.</description>
    </item>
    
    <item>
      <title>Realization of distributed tracing by Envoy</title>
      <link>https://nakabonne.dev/posts/realization-of-distributed-tracing-by-envoy/</link>
      <pubDate>Tue, 18 Dec 2018 10:08:02 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/realization-of-distributed-tracing-by-envoy/</guid>
      <description>Necessity of distributed tracing Since distributed architecture such as Microservices are handled across multiple services, it’s difficult to keep track of communication between services. For that reason,
 It becomes difficult to investigate the cause when a failure occurs It becomes difficult to investigate the cause of performance degradation  Distributed tracing solves these problems by visualizing communication.</description>
    </item>
    
    <item>
      <title>A choice to start small Service Mesh</title>
      <link>https://nakabonne.dev/posts/a-choice-to-start-small-service-mesh/</link>
      <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/a-choice-to-start-small-service-mesh/</guid>
      <description>Now, the architecture called Service Mesh is attracting attention in the Microservice industry.
There are various products for realization, but I made a small control-plane called sxds.
In this article, I will introduce the means to start small Service Mesh referring to sxds.</description>
    </item>
    
    <item>
      <title>Go × Clean Architecture implementation pattern</title>
      <link>https://nakabonne.dev/posts/go-clean-architecture/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/go-clean-architecture/</guid>
      <description>Click here for Japanese version
What is Clean Architecture? It could be thought an architecture pattern that dissociates interest by realizing:
 Make domain logic independent Make framework independent Make UI independent Make any external agency independent Make domain logic easier to test  you may refer to various articles for further details, and we will focus on discussing about implementation patterns.</description>
    </item>
    
    <item>
      <title>Why was gRPC born?</title>
      <link>https://nakabonne.dev/posts/why-was-grpc-born/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/why-was-grpc-born/</guid>
      <description>The term gRPC became very famous, and articles such as “Introducing gRPC in house” and “How to build gRPC server” can now overflow.
  By doing this, the hurdle for introducing gRPC has come down, and it has become possible to create a production ready gRPC server relatively easily.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://nakabonne.dev/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/about/</guid>
      <description>Hi there! I&amp;rsquo;m Ryo Nakao.
I&amp;rsquo;m a software engineer, quite interested in reducing the cycle time between an idea and usable software.
I can be found online at:
 Github LinkedIn Twitter (Mostly Japanese) Blog(ja)  </description>
    </item>
    
  </channel>
</rss>