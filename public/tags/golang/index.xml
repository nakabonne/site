<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Ryo Nakao</title>
    <link>https://nakabonne.dev/tags/golang/</link>
    <description>Recent content in Golang on Ryo Nakao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://nakabonne.dev/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Take a walk the Go AST</title>
      <link>https://nakabonne.dev/posts/take-a-walk-the-go-ast/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/take-a-walk-the-go-ast/</guid>
      <description>もしあなたがGoのASTについてcurious aboutした時、何を参照しますか？ドキュメント？ソースコード？ ドキュメントを読めば抽象的な理解はできますが、API同士の関連などを理解することはできません。 ソースコードを読めばそれらも理解出来ますが、全部読もうとするとかなり体力を使います。 なのでこの記事ではその中間となることを目指します。肩の力を抜いてASTを散歩することで私達が普段書いているGoのコードが内部でどのように表現されているかを理解しましょう。
この記事ではソースコードをパースする方法には触れず、ASTが構築された後から始めます。 コードがASTに変換される方法について気になる人は、 Digging deeper into the analysis of Go-code にnavigate toしてください。</description>
    </item>
    
    <item>
      <title>Digging deeper into the analysis of Go-code</title>
      <link>https://nakabonne.dev/posts/digging-deeper-into-the-analysis-of-go-code/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/digging-deeper-into-the-analysis-of-go-code/</guid>
      <description>The analysis of source code at the syntactic level can help you with your coding in a variety of ways.</description>
    </item>
    
    <item>
      <title>A choice to start small Service Mesh</title>
      <link>https://nakabonne.dev/posts/a-choice-to-start-small-service-mesh/</link>
      <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/a-choice-to-start-small-service-mesh/</guid>
      <description>Now, the architecture called Service Mesh is attracting attention in the Microservice industry.</description>
    </item>
    
    <item>
      <title>Go × Clean Architecture implementation pattern</title>
      <link>https://nakabonne.dev/posts/go-clean-architecture/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nakabonne.dev/posts/go-clean-architecture/</guid>
      <description>Click here for Japanese version
What is Clean Architecture? It could be thought an architecture pattern that dissociates interest by realizing:</description>
    </item>
    
  </channel>
</rss>